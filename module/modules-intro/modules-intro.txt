모듈(module)이란 애플리케이션을 구성하는 각각의 파일을 지칭함
모듈은 대개 클래스 하나 또는 특정한 목적을 가진 복수의 함수로 구성된 라이브러리로 구성

export 지시자를 변수나 함수 앞에 붙이면 외부 모듈에서 해당 변수나 합수에 접근 가능
import 지시자를 사용하면 외부 모듈의 기능을 가져올 수 있음

** 주의 **
모듈은 로컬 파일에서 동작하지 않고, http, https 프로토콜을 통해서만 동작함
예시를 실행하려면 로컬 웹 서버인 static-server나, 에디터의 라이브 서버 익스텐션을 사용할 것

node.js 실행 에제 - ./example/main.js
브라우저 실행 예제 - ./example/index.html

모든 호스트 환경에 공통으로 적용되는 모듈의 특징은 다음과 같음
- 엄격 모드(use strict)로 실행됨
- 모듈 레벨 스코프가 존재함. 따라서 모듈 내부에서 정의한 변수나 함수는 다른 스크립트에서 접근할 수 없음
- 동일한 모듈이 여러 곳에서 사용되더라도 최초 호출 시 단 한번만 실행되고, 그 결과는 이 모듈을 임포트하는 모든 모듈에 내보내짐
  실무에서는 최상위 레벨 모듈을 대개 초기화나 내부에서 쓰이는 데이터 구조를 만들고 이를 내보내 재사용하고 싶을 때 사용
  예: admin.js 모듈에 admin이란 객체 변수가 있고, 이 변수를 어느 한 모듈에서 변경하면 다른 모듈에도 변경이 반영됨
- import.meta 객체는 현재 모듈에 대한 정보를 제공해줌(절대 url 등)
- 모듈 최상위 레벨의 this는 undefined

브라우저 환경에서 모듈 스크립트(type="module"이 붙은 스크립트)가 일반 스크립트와 다른 점
1. 항상 지연 실행됨. 따라서
  - 외부 모듈 스크립트를 다운로드할 때 브라우저의 html 처리가 멈추지 않음
  - html 문서가 완전히 만들어진 이후에 실행됨
  - 스크립트의 상대적 순서가 유지됨. 문서상 위쪽의 스크립트부터 차례대로 실행
  이런 특징 때문에 모듈 스크립트는 항상 완전한 html 페이지를 볼 수 있고 문서 내 요소에도 접근 가능

2. 인라인 스크립트의 비동기 처리
   모듈 스크립트에선 async 속성을 인라인 스크립트에도 적용할 수 있음
   이런 특징은 광고나 문서 레벨 이벤트 리스너, 카운터 같이 어디에도 종속되지 않는 기능을 구현할 때 유용함

3. src 속성값이 동일한 외부 모듈 스크립트는 한 번만 실행됨

4. 외부 사이트같이 다른 오리진에서 모듈 스크립트를 불러오려면 CORS 헤더가 필요함. 때문에 보안이 강화됨

5. 브라우저 환경에서 import는 반드시 상대 혹은 절대 URL 앞에 와야 함

브라우저 환경에서 모듈을 단독으로 사용하는 경우는 흔치 않음
대개 Webpack과 같은 번들러(bundler)를 사용해 모듈을 한데 묶어 프로덕션 서버에 올리는 방식을 사용

번들러의 역할은 다음과 같음

1. 진입점(main module) 지정
2. 의존 관계 분석
3. 모듈 전체를 한데 묶기(번들링)
4. 불필요한 코드 제거(tree-shaking)
5. 최신 문법 변환(Babel)
6. 파일 압축 (minify)