// 배열에 객체를 추가하고 참조를 null로 덮어 씌워도 객체는 메모리에 남아있음
let john = { name : 'John'};

let array = [ john ];

john = null;

console.log(JSON.stringify(array[0])) // {"name":"John"}

// 맵에서 객체를 key로 추가한 경우 역시 맵이 메모리에 있는 한 메모리에 남아있음

let mary = { name : 'Mary'};

let map = new Map();
map.set(mary, '...');

mary = null;

for(let obj of map.keys()){
  console.log(JSON.stringify(obj)); // {"name":"Mary"}
}

console.log(map.size); // 1

// 그러나 위크맵을 사용하면 키로 쓰인 객체가 가비지 컬렉션 대상이 됨(== 메모리에서 날아감)

// 위크맵(WeakMap)
// 위크맵의 키는 반드시 객체여야 함. 원시값은 키가 될 수 없음
let weakMap = new WeakMap();
let obj = {};

weakMap.set(obj, 'ok'); // 정상
// weakMap.set('test', 'yoohoo'); // TypeError: Invalid value used as weak map key

let tom = { name : 'Tom' };

weakMap.set(tom, 'tt');

tom = null;

console.log(weakMap.get(tom)); // undefined, weakMap의 키로 쓰인 객체는 메모리에서 사라짐!

// 위크맵은 keys(), values(), entries() 메서드를 지원하지 않음
// get(key), set(key, value), delete(key), has(key)만 지원
// 가비지 컬렉션의 동작 시점을 정확히 알 수 없기 때문에, 위크맵 요소가 몇 개 있는지 파악할 수 없어서
// 위크맵의 전체 요소를 대상으로 하는 메서드가 동작 불가능. 그래서 지원을 안 함

// 위크맵은 특정 객체가 살아있을 때에만 데이터 저장이 필요한 순간 사용한다
// 예: 사용자의 방문 횟수를 저장해주는 코드
let visitsCountWeakMap = new WeakMap();
let visitsCountMap = new Map();

function countUserByMap(user) {
    let count = visitsCountMap.get(user) || 0;
    visitsCountMap.set(user, count + 1);
}

function countUserByWeakMap(user) {
    let count = visitsCountWeakMap.get(user) || 0;
    visitsCountWeakMap.set(user, count + 1);
}

let peter = { name : 'peter' };

countUserByMap(peter);
countUserByWeakMap(peter);

peter = null;

console.log(`visitsCountWeakMapSize: ${visitsCountWeakMap.size}`); // peter 객체가 삭제되면 visitsCountWeakMap도 같이 사라짐
console.log(`visitsCountMapSize: ${visitsCountMap.size}`); // 여전히 visitsCountMap이 살아있음

for( let obj of visitsCountMap.keys()){
    console.log(JSON.stringify(obj)); // {"name":"peter"}
}
